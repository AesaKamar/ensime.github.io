\documentclass{article}

\usepackage[utf8]{inputenc}

\usepackage{amsmath}

\newenvironment{mylisting}
{\begin{list}{}{\setlength{\leftmargin}{1em}}\item\scriptsize\bfseries}
  {\end{list}}

\title{ENSIME: User Manual}

\begin{document}

\maketitle

\newpage

\tableofcontents

\newpage


\pagestyle{empty}


\section{Introduction}

\subsection{What is ENSIME?}
ENSIME is an intelligent Scala environment for Emacs. It provides many features that are commonly found only in IDEs, such as live error-checking, symbol inspection, package/type browsing, and basic refactorings. ENSIME's architecture is client/server: a thin Emacs client communicates with an analysis server written in Scala. The client component is based heavily on the SLIME environment for Common Lisp - using the same Swank RPC protocol. The server component services these calls using an instance of the official Scala compiler, so the results should always be consistent with the commandline compiler.

\section{Installation}

\subsection{System Requirements}

\begin{itemize}
\item Emacs 22 or later (23 is recommended)
\item Unix(y) or Windows OS
\item JVM Version 6
\item Scala 2.8 compatible source and libraries.
\end{itemize}

\subsubsection{Note on Binary Compatibility}

The compiler version that ENSIME uses to analyze sources is the same as that which is used to compile ENSIME itself. This version (as of the writing of this document) is 2.8.0. It may not be possible for the ENSIME compiler to load older Scala jars. We recommend that you use a version of ENSIME that targets the same Scala version as your project.

\subsection{Standard Installation}

\noindent
\textbf{scala-mode}:\\
ENSIME is designed to compliment scala-mode. scala-mode can be found in the Scala distribution under misc/scala-tool-support/emacs/\\

\noindent
\textbf{ensime-mode}:\\
Download the latest ENSIME distribution from github.com at \begin{verbatim}http://github.com/aemoncannon/ensime/downloads\end{verbatim} Unpack the ENSIME distribution into a directory of your choosing, and add the following lines to your .emacs file:

\begin{mylisting}
\begin{verbatim}
(require 'scala-mode)
(add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))
(add-to-list 'load-path "ENSIME_ROOT/elisp/")
(require 'ensime)
(add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
;; MINI HOWTO: open .scala file. Ensure bin/server.sh is executable. M-x ensime
\end{verbatim}
\end{mylisting}


Now you need to define a .ensime file for your project. See section \ref{sec:config}.


\subsection{Installation from Git Clone}

Note: This section is for people who want to hack on ENSIME itself.\\

\noindent
After cloning, and before you can run ENSIME, you must create the distribution directory structure. The sbt task 'stage' will create the directory 'dist' underneath the root clone directory. Then, follow the install instructions in section 2.2 above, substituting CLONE\_DIR/dist as the root of your ENSIME distribution.\\

\noindent
A common work-flow when hacking ENSIME:
\begin{itemize}
\item Edit source files
\item 'sbt dist'
\item Stop ENSIME server by killing \emph{*inferior-ensime-server*} buffer
\item Restart ENSIME with M-x ensime
\end{itemize}



\section{Defining a Project}

\subsection{Generating a Config File}
\label{sec:config}

ENSIME includes a wizard for automatically generating configuration files. In Emacs, execute \emph{M-x ensime-config-gen}. Then simply follow the directions in the mini-buffer to create a .ensime file for your project.  ENSIME will try to guess the type(sbt, mvn, etc) of your project, based on the files and directory structure. If the config generator does a poor job for your project, please let us know so we can improve it. And of course you can still create the .ensime file for your project manually. See the section on the .ensime format below.

\subsection{Notes on Specific Project Types}

\subsubsection{SBT}

\noindent
\textbf{Dependencies}:\\
For sbt projects, ENSIME uses the build.properties file to determine the Scala version to compile with. It then builds classpaths using the jars in the \emph{lib} and \emph{lib\_managed} directories (selecting subdirectories based on Scala version and build configuration). \\

\noindent
\textbf{Inferior SBT}:\\
The keystrokes \emph{C-c C-a} will launch (or switch to an existing) inferior sbt session.\\

\noindent
\textbf{Compile-on-Save}:\\
If the configuration directive :sbt-compile-on-save is set to 't', ENSIME will invoke the 'compile' task in the inferior sbt process whenever you save a Scala buffer. Warning: This can eat up a lot of CPU.\\

\noindent
\textbf{Subprojects}:\\
Each sbt subproject must have it's own .ensime file. The server is smart enough to notice that the project is a subproject, and will find dependencies that are shared between all subprojects.

\subsubsection{Maven}

\noindent
\textbf{Known limitations}:\\
Currently ENSIME expects to find pom.xml in the root of the project.\\

\noindent
\textbf{Dependencies}:\\
Dependencies are discovered using the maven ant task. In debugging dependency resolution issues, it may be helpful to look at the contents of the \emph{*inferior-ensime-server*} buffer.

\subsubsection{Other + Ivy}

\noindent
\textbf{Dependencies}:\\
Dependencies are discovered using the ivy ant task. In debugging dependency resolution issues, it may be helpful to look at the contents of the \emph{*inferior-ensime-server*} buffer. If you've defined ivy configurations that you'd like to map to the compile and runtime modes in ENSIME, see the :ivy-*-conf directives in section \ref{sec:configformat}. If your ivy.xml file is in a non-standard location, see the :ivy-file directive .

\subsubsection{Other}

Your project doesn't fit into one of the given categories? No problem. See section \ref{sec:configformat} for how to specify dependency, source, and class-output locations.


\subsection{Config File Format}
\label{sec:configformat}

Each project \emph{must} have a .ensime file. The .ensime file contains the configuration for your project, and must be located in your project's root directory.The contents of the file must be a valid Emacs-Lisp S-Expression. Here's a quick primer on ELisp values.

\vspace{1 cm}

\begin{tabular}{|l|l|}
  \hline
  {\bf "..."} & A String  \\ \hline
  {\bf t} & True \\ \hline
  {\bf nil} & False, null, or opposite of t.  \\ \hline
  {\bf (...)} & A literal list. \\ \hline
  {\bf :abcd123} & A keyword \\ \hline
  {\bf (:key1 val1 :key2 val2)} & An indexed property-list. \\ \hline
\end{tabular}

\vspace{1 cm}

What follows is a description of all available configuration options. Required options are marked as 'Required'. Any filename or directory paths may be relative to the project root.

\vspace{5 mm}

\noindent
{\bf :server-root "...."}\\
\emph{Required} The absolute path to the root of your ENSIME distribution. Note, this is not your project directory.
\vspace{5 mm}


\noindent
{\bf :server-cmd  "...."}\\
The command with which to invoke the ENSIME server. By default, this will be set to "bin/server.sh" on Unix systems and "bin/server.bat" on Windows.
\vspace{5 mm}


\noindent
{\bf :server-host "...."}\\
The host to connect to. Connecting to remote ENSIME servers is not currently supported (though it may work...)
\vspace{5 mm}


\noindent
{\bf :use-sbt [t or nil]}\\
Assume a standard sbt directory structure. Look in default sbt locations for dependencies, sources, target, etc.
\vspace{5 mm}


\noindent
{\bf :sbt-compile-on-save [t or nil]}\\
Should ENSIME issue a 'compile' command to sbt whenever you save a file? This is disabled by default as it consumes a lot of CPU.
\vspace{5 mm}


\noindent
{\bf :use-maven t}\\
Use an existing pom.xml to determine the dependencies for the project. A Maven-style directory structure is assumed.
\vspace{5 mm}


\noindent
{\bf :use-ivy t}\\
Use an existing ivy.xml to determine the dependencies for the project. A Maven-style directory structure is assumed.
\vspace{5 mm}


\noindent
{\bf :ivy-compile-conf "...."}\\
\noindent
{\bf :ivy-runtime-conf "...."}\\
Specify the names of dependency profiles to be used for compilation and runtime scenarios. Only necessary if you have custom configurations!
\vspace{5 mm}


\noindent
{\bf :project-package "...."}\\
The main scala package for your project. Used by ENSIME to populate the project outline view. 
\vspace{5 mm}


\noindent
{\bf :sources ([directory or filename]*)}\\
Manually include source files by directory(recursively) or by filename. If directory is given, only .scala and .java files will be considered.
\vspace{5 mm}


\noindent
{\bf :dependency-jars ([directory or filename]*)}\\
Manually include jars by directory(recursively) or by filename.
\vspace{5 mm}


\noindent
{\bf :compile-dependency-jars ([directory or filename]*)}\\
Manually include jars by directory(recursively) or by filename, to be included only at compile time.
\vspace{5 mm}


\noindent
{\bf :runtime-dependency-jars ([directory or filename]*)}\\
Manually include jars by directory(recursively) or by filename, to be included only at run time.
\vspace{5 mm}


\noindent
{\bf :dependency-dirs ([directory or filename]*)}\\
Manually include directories of .class files.
\vspace{5 mm}


\noindent
{\bf :target dir}\\
Manually specify the target of the project build process. Should be the directory where .class files are written. The target is used to populate the classpath when launching the inferior scala repl and the debugger.
\vspace{5 mm}


\section{Usage}

\subsection{Startup}
To start ensime type \emph{M-x ensime}. Follow the minibuffer instructions to specify the location of your .ensime project file. Bear in mind that the server may take several seconds to finish loading and analyzing your project's sources. To watch the progress of the ENSIME startup, switch to the \emph{*inferior-ensime-server*} buffer.

\subsection{Symbol and Member Completion}
ENSIME completion is initiated by pressing the \emph{TAB} key. To complete a symbol, type the first couple characters, then press \emph{TAB}. Currently this works for local variables, method parameters, unqualified method names, and type names. To complete a type member, type '.' or \emph{SPACE} followed by \emph{TAB}.\\

\noindent
\textbf{Completion menu key commands}:\\
Candidates can be scrolled with \emph{M-n} and \emph{M-p} or \emph{UP} and \emph{DOWN}. Candidates can be searched by typing \emph{C-s}. Press \emph{TAB} again to complete a common prefix. To cancel completion, type \emph{C-g}. Finally, if you've selected the completion you want, press \emph{ENTER}. If the selected completion was a method name, the minibuffer will display help for the method parameters.

\subsection{Type/Package Inspector}


\noindent
\textbf{Invocation}:\\
Double-clicking on a symbol in a Scala buffer, or typing \emph{C-c t} while the point is over a symbol will launch the type inspector. Typing \emph{C-c o} will open the inspector on the current project's main package. \emph{C-c p} will inspect the package of the current source file. Use the command \emph{M-x ensime-inspect-package-by-path} to inspect an arbitrary package.\\

\noindent
\textbf{Package Inspector}:\\
Displays a hierarchical view of a package, including all top-level types. Select a type to open the Type Inspector.\\

\noindent
\textbf{Type Inspector}:\\
Lists the interfaces that contribute members to the inspected type. List each interface's methods, with full type signatures. If the type has a companion object/class, a link to the companion will appear under the heading.\\

\noindent
\textbf{Navigation}:\\
Most things in the inspector are hyper-linked. You can click these links with the mouse or position your cursor over them and press ENTER. A history is kept of all the pages you view in the inspector. Go back in this history by typing '\emph{,}' and forward by typing '\emph{.}'.


\subsection{The Scala REPL}

First, ensure that you've set the :target directive in your config file. The REPL will load your project classes from the :target directory. Then, type \emph{C-c C-z} to launch the embedded Scala REPL. The REPL should be launched with all your project classes loaded and available. Please note that the Scala 2.8 REPL tab-completion does not currently work under ENSIME.

\subsection{Incremental Building}

Incremental building allows for fast turn-around in the running/testing of your application. The building/rebuilding support in ENSIME is intended for those who are not already using the sbt build system, as sbt users will probably wish to continue using the sbt shell's support for incremental building (it may still be worth a try though, as the build-manager included in ENSIME uses a finer grained check for modifications).

First, ensure that you've set the :target directive in your config file. The :target directory is where the classes will be written by the incremental builder. Then, type \emph{C-c b b} to start building your project. When the build is finished, a window will appear listing the result of the build. After subsequent source changes, you may type \emph{C-c b r} to rebuild only those parts of the project that depend on things you've changed. 

\subsection{Debugging}

Debugging support in ENSIME is provided by running an instance of jdb under Emacs, sending it commands, and parsing its output. As such, in addition to the graphical tools provided by ENSIME, you also have full access to the jdb command line.\\

\noindent
\textbf{Launching the Debugger}:\\
First, ensure that you've set the :target directive in your config file. The debugger needs these classes to run your application. Then, type \emph{C-c d d} to launch the embedded Scala Debugger. \\

\noindent
\textbf{Break Points}:\\
With your cursor on a line of Scala source, type \emph{C-c d b} to set a breakpoint. Type \emph{C-c d u} to remove the breakpoint.\\

\noindent
\textbf{Run Control}:\\
Once you've set your breakpoints, type \emph{C-c d r} to run the program. Type \emph{C-c d c} to continue after hitting a breakpoint, or \emph{C-c d s} to step into the current line, or \emph{C-c d n} to step to the next line.\\

\noindent
\textbf{Value Inspection}:\\
When stopped at a breakpoint, switch to the debug buffer \emph{*ensime-db*}. Type 'locals' ENTER to see a list of all the local variables in the current runtime context. Use 'dump X'' to dump the fields of an object X. Or 'print X' to print the value of an arbitrary expression X. To get help on more jdb commands, type 'help'.

\subsection{Refactoring}

\noindent
\textbf{Rename}:\\
Place your cursor over the symbol you'd like to rename. Type \emph{M-x ensime-refactor-rename} and follow the minibuffer instructions.\\

\noindent
\textbf{Organize Imports}:\\
Type \emph{M-x ensime-refactor-organize-imports} in a Scala source buffer. Follow the minibuffer instructions.\\

\noindent
\textbf{Extract Method}:\\
Select a region by setting the mark using \emph{C-SPACE} and then placing the point at the end of the region. All selected code will be extracted into a helper method. Type \emph{M-x ensime-refactor-extract-method} and follow the minibuffer instructions.\\

\noindent
\textbf{Inline Local}:\\
Place your cursor over the local val who's value you'd like to inline. Type \emph{M-x ensime-refactor-inline-local} and follow the minibuffer instructions.\\


\subsection{Quick Command Reference}

\vspace{5 mm}

\noindent
{\bf TAB}\\
Start completing a method/variable.
\vspace{5 mm}

\noindent
{\bf C-c t  or  Double-Click}\\
Inspect the type of the expression under the cursor.
\vspace{5 mm}

\noindent
{\bf M-.  or  Control-Click}\\
Jump to definition of symbol under cursor.
\vspace{5 mm}

\noindent
{\bf M-,}\\
Pop back to previously visited position.
\vspace{5 mm}

\noindent
{\bf Double-Click(on an import statement)}\\
Inspect the package under cursor.
\vspace{5 mm}

\noindent
{\bf Mouse Hover}\\
Echo the type of the expression under the cursor.
\vspace{5 mm}

\noindent
{\bf C-c p}\\
Inspect the package of the current source file.
\vspace{5 mm}

\noindent
{\bf C-c o}\\
Inspect the package specified in .ensime as :project-package.
\vspace{5 mm}

\noindent
{\bf .}\\
Forward one page in the inspector history.
\vspace{5 mm}

\noindent
{\bf ,}\\
Backward one page in the inspector history.
\vspace{5 mm}

\noindent
{\bf C-n  or  TAB}\\
Forward one link in the inspector.
\vspace{5 mm}

\noindent
{\bf C-p}\\
Backward one link in the inspector.
\vspace{5 mm}

\noindent
{\bf C-c C-a}\\
Switch to the sbt command-line (works for sbt projects only)
\vspace{5 mm}

\noindent
{\bf C-c C-z}\\
Switch to the scala interpreter, with project classes in the classpath.
\vspace{5 mm}

\noindent
{\bf C-c c}\\
Type-check the current file.
\vspace{5 mm}

\noindent
{\bf C-c a}\\
Type-check all files in the project.
\vspace{5 mm}

\noindent
{\bf M-x ensime-reload-config}\\
Reload the .ensime file and recompile the project. Useful if you hit a server bug.
\vspace{5 mm}

\noindent
{\bf M-x ensime-config-get}\\
Start the automatic configuration file generator.
\vspace{5 mm}

\noindent
{\bf M-x ensime-reload-config}\\
Reload the config file from the disk, Start the automatic configuration file generator.
\vspace{5 mm}


\section{Troubleshooting}

You may want to examine the contents of the \emph{*inferior-ensime-server*} buffer. This buffer collects the stdout and stderr of the server process, which is useful for debugging. If the compiler is in a broken state, you can restart it with M-x ensime-reload-config. Otherwise, if things are irreparably b0rked, you can always kill the \emph{*inferior-ensime-server*} buffer (which kills the server process) and restart ensime with M-x ensime. 

If you've hit a recurring bug, please post an issue to github.com/aemoncannon/ensime. Please include your OS, Emacs version, ENSIME version, and the contents of \emph{*inferior-ensime-server*}.


\end{document}




